---
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import { WHATSAPP_NUMBER } from '../lib/constants';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const whatsappMessage = encodeURIComponent(
  lang === 'es'
    ? 'Hola, me gustaría obtener más información sobre sus servicios.'
    : 'Hello, I would like to get more information about your services.'
);
const whatsappUrl = `https://wa.me/${WHATSAPP_NUMBER}?text=${whatsappMessage}`;
---

<div class="bg-white/10 p-8 rounded-xl border border-gray-700">
  <form id="contact-form" class="space-y-6">
    <div>
      <label for="name" class="block text-sm font-medium text-white mb-2">
        {t('contact.name')}
      </label>
      <input
        type="text"
        id="name"
        name="name"
        required
        class="w-full px-4 py-3 bg-white/5 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-red-600"
      />
    </div>

    <div>
      <label for="email" class="block text-sm font-medium text-white mb-2">
        {t('contact.email')}
      </label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full px-4 py-3 bg-white/5 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-red-600"
      />
    </div>

    <div>
      <label for="phone" class="block text-sm font-medium text-white mb-2">
        {t('contact.phone')}
      </label>
      <input
        type="tel"
        id="phone"
        name="phone"
        class="w-full px-4 py-3 bg-white/5 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-red-600"
      />
    </div>

    <div>
      <label for="company" class="block text-sm font-medium text-white mb-2">
        {t('contact.company')}
      </label>
      <input
        type="text"
        id="company"
        name="company"
        class="w-full px-4 py-3 bg-white/5 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-red-600"
      />
    </div>

    <div>
      <label for="message" class="block text-sm font-medium text-white mb-2">
        {t('contact.message')}
      </label>
      <textarea
        id="message"
        name="message"
        rows="4"
        required
        class="w-full px-4 py-3 bg-white/5 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-red-600"
      ></textarea>
    </div>

    <div class="flex flex-col sm:flex-row gap-4">
      <button
        type="submit"
        class="flex-1 bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition font-semibold"
      >
        {t('contact.send')}
      </button>

      <a
        href={whatsappUrl}
        target="_blank"
        rel="noopener noreferrer"
        class="flex-1 bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition font-semibold text-center"
      >
        {t('contact.whatsapp')}
      </a>
    </div>

    <div id="form-message" class="hidden p-4 rounded-lg"></div>
  </form>
</div>

<script>
  const form = document.getElementById('contact-form') as HTMLFormElement;
  const formMessage = document.getElementById('form-message');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    try {
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (formMessage) {
        formMessage.classList.remove('hidden', 'bg-red-100', 'bg-green-100', 'text-red-700', 'text-green-700');

        if (result.success) {
          formMessage.classList.add('bg-green-100', 'text-green-700');
          form.reset();
        } else {
          formMessage.classList.add('bg-red-100', 'text-red-700');
        }

        formMessage.textContent = result.message;
      }
    } catch (error) {
      if (formMessage) {
        formMessage.classList.remove('hidden', 'bg-green-100', 'text-green-700');
        formMessage.classList.add('bg-red-100', 'text-red-700');
        formMessage.textContent = 'Error al enviar el mensaje. Por favor, intenta de nuevo.';
      }
    }
  });
</script>

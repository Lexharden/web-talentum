---
import { getCollection } from 'astro:content';
import BlogLayout from '../../../layouts/blog/BlogLayout.astro';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');

  return blogEntries.map((entry) => ({
    params: {
      lang: entry.data.lang,
      slug: entry.slug
    },
    props: { entry },
  }));
}

interface Props {
  entry: CollectionEntry<'blog'>;
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Calcular tiempo de lectura si no está definido
const calculateReadingTime = (body: string) => {
  const wordsPerMinute = 200;
  const words = body.trim().split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
};

const readingTime = entry.data.readingTime || calculateReadingTime(entry.body);

// Obtener posts relacionados (misma categoría, excluyendo el actual)
const allPosts = await getCollection('blog', ({ data, slug }) => {
  return (
    data.draft !== true &&
    data.lang === entry.data.lang &&
    slug !== entry.slug
  );
});

const relatedPosts = allPosts
  .filter((post) => post.data.category === entry.data.category)
  .sort((a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime())
  .slice(0, 3);

// Formatear fecha para posts relacionados
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat(entry.data.lang === 'es' ? 'es-MX' : 'en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  }).format(date);
};
---

<BlogLayout
  title={entry.data.title}
  description={entry.data.description}
  author={entry.data.author}
  publishDate={entry.data.publishDate}
  updatedDate={entry.data.updatedDate}
  category={entry.data.category}
  tags={entry.data.tags}
  image={entry.data.image}
  lang={entry.data.lang}
  readingTime={readingTime}
>
  <!-- Contenido del post -->
  <Content />

  <!-- Posts Relacionados -->
  {relatedPosts.length > 0 && (
    <aside class="not-prose mt-16 pt-12 border-t border-gray-200">
      <h2 class="text-2xl font-bold text-gray-900 mb-8">
        {entry.data.lang === 'es' ? 'Artículos Relacionados' : 'Related Posts'}
      </h2>
      <div class="grid md:grid-cols-3 gap-6">
        {relatedPosts.map((post) => (
          <a
            href={`/${entry.data.lang}/blog/${post.slug}`}
            class="group block bg-white rounded-lg border border-gray-200 hover:border-red-600 hover:shadow-lg transition-all duration-300 overflow-hidden"
          >
            {post.data.image && (
              <div class="aspect-video overflow-hidden">
                <img
                  src={post.data.image.src}
                  alt={post.data.image.alt}
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                  loading="lazy"
                />
              </div>
            )}
            <div class="p-5">
              <span class="inline-block px-2 py-1 bg-red-50 text-red-600 text-xs font-semibold rounded uppercase mb-2">
                {post.data.category}
              </span>
              <h3 class="font-bold text-gray-900 mb-2 group-hover:text-red-600 transition-colors line-clamp-2">
                {post.data.title}
              </h3>
              <p class="text-sm text-gray-600 mb-3 line-clamp-2">
                {post.data.description}
              </p>
              <div class="text-xs text-gray-500">
                {formatDate(post.data.publishDate)}
              </div>
            </div>
          </a>
        ))}
      </div>
    </aside>
  )}

  <!-- Navegación anterior/siguiente -->
  <nav class="not-prose mt-12 pt-8 border-t border-gray-200" aria-label="Post navigation">
    <div class="grid md:grid-cols-2 gap-6">
      {(() => {
        const currentIndex = allPosts.findIndex((post) => post.slug === entry.slug);
        const prevPost = allPosts[currentIndex + 1];
        const nextPost = allPosts[currentIndex - 1];

        return (
          <>
            {prevPost && (
              <a
                href={`/${entry.data.lang}/blog/${prevPost.slug}`}
                class="group flex items-center gap-4 p-4 bg-gray-50 rounded-lg hover:bg-red-50 transition-colors"
              >
                <svg class="w-6 h-6 text-gray-400 group-hover:text-red-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
                <div class="flex-1 min-w-0">
                  <div class="text-xs text-gray-500 mb-1 uppercase tracking-wide">
                    {entry.data.lang === 'es' ? 'Anterior' : 'Previous'}
                  </div>
                  <div class="font-semibold text-gray-900 group-hover:text-red-600 transition-colors truncate">
                    {prevPost.data.title}
                  </div>
                </div>
              </a>
            )}
            {nextPost && (
              <a
                href={`/${entry.data.lang}/blog/${nextPost.slug}`}
                class="group flex items-center gap-4 p-4 bg-gray-50 rounded-lg hover:bg-red-50 transition-colors md:ml-auto"
              >
                <div class="flex-1 min-w-0 text-right">
                  <div class="text-xs text-gray-500 mb-1 uppercase tracking-wide">
                    {entry.data.lang === 'es' ? 'Siguiente' : 'Next'}
                  </div>
                  <div class="font-semibold text-gray-900 group-hover:text-red-600 transition-colors truncate">
                    {nextPost.data.title}
                  </div>
                </div>
                <svg class="w-6 h-6 text-gray-400 group-hover:text-red-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </a>
            )}
          </>
        );
      })()}
    </div>
  </nav>
</BlogLayout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
